<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.xindian.ano.mapper.AnoUserMapper">

    <resultMap type="AnoUser" id="AnoUserResult">
        <result property="anoUserId" column="ano_user_id"/>
        <result property="userId" column="user_id"/>
        <result property="pId" column="p_id"/>
    </resultMap>

    <sql id="selectAnoUserVo">
        select ano_user_id, user_id, p_id
        from ano_user
    </sql>

    <select id="selectAnoUserList" parameterType="AnoUser" resultMap="AnoUserResult">
        <include refid="selectAnoUserVo"/>
        <where>
            <if test="userId != null ">and user_id like concat('%', #{userId}, '%')</if>
            <if test="pId != null  and pId != ''">and p_id like concat('%', #{pId}, '%')</if>
        </where>
    </select>
    <select id="selectAnoUserList2" parameterType="SysUser" resultMap="AnoUserResult">
        select user_id, dept_id, nick_name from sys_user
        where del_flag = '0'
        <if test="userId != null and userId != 0">
            AND user_id like concat('%', #{userId}, '%')
        </if>
        and dept_id=#{deptId}
    </select>
    <select id="selectAnoUserByAnoUserId" parameterType="Long" resultMap="AnoUserResult">
        <include refid="selectAnoUserVo"/>
        where ano_user_id = #{anoUserId}
    </select>
    <select id="selectNotAssign" resultType="com.ruoyi.xindian.ano.domain.AnoUser">
        SELECT l.p_id
        from alert_log l
        WHERE l.p_id not IN (select a.p_id FROM ano_user a WHERE a.user_id=#{userId})
        GROUP BY l.p_id
    </select>

    <insert id="insertAnoUser" parameterType="AnoUser" useGeneratedKeys="true" keyProperty="anoUserId">
        insert ignore into ano_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="pId != null">p_id,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="pId != null">#{pId},</if>
        </trim>
    </insert>

    <insert id="insertAno" parameterType="string">
        insert ignore into alert_log_user(log_id, p_id, log_type, event_name, event_description, user_id)
        select alert_log.log_id,
               alert_log.p_id,
               alert_log.log_type,
               alert_log.event_name,
               alert_log.event_description,
               #{param1} as 'user_id'
        from alert_log
        where p_id = #{param2};
    </insert>

    <update id="updateAnoUser" parameterType="AnoUser">
        update ano_user
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">user_id = #{userId},</if>
            <if test="pId != null">p_id = #{pId},</if>
        </trim>
        where ano_user_id = #{anoUserId}
    </update>

    <delete id="deleteAnoUserByAnoUserId" parameterType="Long">
        delete
        from ano_user
        where ano_user_id = #{anoUserId}
    </delete>

    <delete id="deleteAnoUserByAnoUserIds" parameterType="String">
        delete from ano_user where ano_user_id in
        <foreach item="anoUserId" collection="array" open="(" separator="," close=")">
            #{anoUserId}
        </foreach>
    </delete>
    <delete id="deleteAnoUserByAnoUser" parameterType="AnoUser">
        delete from ano_user where user_id=#{userId} and p_id=#{pId}
    </delete>
</mapper>